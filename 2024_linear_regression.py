# -*- coding: utf-8 -*-
"""2024_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CpsGGoImGf8QDzAq2ZuhQVBAgBMTJlKD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/Salary_dataset.csv')

df.shape

type(df)

df.head(31)

print(df.describe())

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Load your dataset (replacing our actual data)


# Normalize the "YearsExperience" column
scaler = MinMaxScaler()
df['Norm_YearsExperience'] = scaler.fit_transform(df[['YearsExperience']])

# Check the first few rows of the dataframe
print(df.head())

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
df['STDS_EXP'] = scaler.fit_transform(df[["YearsExperience"]])

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Load your dataset (replacing our actual data)


# Normalize the "YearsExperience" column
scaler = MinMaxScaler()
df['Norm_salary'] = scaler.fit_transform(df[['Salary']])

# Check the first few rows of the dataframe
print(df.head())

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
df['STDS_salary'] = scaler.fit_transform(df[["Salary"]])

df

sns.distplot( df.Norm_YearsExperience)
plt.xlabel('Values')  # Customize the x-axis label
plt.ylabel('Density')  # Customize the y-axis label
plt.title('Distribution of my_column')  # Customize the plot title
plt.show()  # Display the plot

import pandas as pd

# Assuming you have a DataFrame called 'df'
mean_weight =df.STDS_EXP.mean()
print(f"The mean weight is approximately {mean_weight:.2f}")

import pandas as pd

# Assuming you have a DataFrame called 'df'
std_points =df.STDS_EXP.std()
print(f"The standard deviation of the 'points' column is approximately {std_points:.4f}")

exp=df[['STDS_EXP']]
x=exp
x

sal=df[['STDS_salary']]
y=sal

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=42)

X_train

X_test

y_test

y_train

type(y_train)

from sklearn.linear_model import LinearRegression
regression=LinearRegression()

regression.fit(X_train,y_train)

"""# we have to decode this value into salary

"""

regression.coef_

regression.intercept_

plt.scatter(X_train,y_train)

plt.scatter(df.YearsExperience,df.Salary)

plt.scatter(X_test,y_test)

plt.scatter(X_train,regression.predict(X_train))

plt.scatter(X_test,regression.predict(X_test))

ypred=regression.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error

from sklearn.metrics import mean_absolute_error, mean_squared_error
mse=mean_squared_error(y_test,ypred)
mae=mean_absolute_error(y_test,ypred)
rmse=np.sqrt(mse)
print(mse)
print(mae)
print(rmse)

from sklearn.metrics import r2_score

from sklearn.metrics import r2_score
score=r2_score(y_test,ypred)
print(score)

import statsmodels.api as sm

modle=sm.OLS(y_train,X_train).fit()

prediction=modle.predict(X_test)
print(prediction)

print(modle.summary())